## Reference
# http://www.geeksforgeeks.org/trie-insert-and-search/

## Desc
# Trie is an efficient information reTRIEval data structure. Using Trie, search complexities can be brought
# to optimal limit(key length). If we store keys in binary search tree, a welll balanced BST will 
# need time proportional to M*logN, where M is maximum string length and N is number of keys in tree.

# Using trie, we can search the key in O(M) time. However, the penalty is on trie storage requirement.
# Every node of trie consist of multiple branches.
# Each branch represents a possible character of keys.
# We need to mark the last node of every key as leaf node.
# A trie node field value will be used to distinguish the node as leaf node.

## Hash and Trie have same time complexity
# hash has to traverse string letter by letter so that it can convert it to an integer hashcode.
# Therefore, the O(1) actually means O(W).
# While, Trie also just need O(W) time on word traverse.

## Hash vs Trie Space complexity
# hash map > Trie
# Tire can save the duplicate letters.
# Therefore, which is better on space.

## When to Use Trie
# 1) we need traverse string letter by letter
# 2) we wanna save space.
# 3) search prefix very convenient.(that's why we also call it prefix tree)

